type Query {
  hello: String!
  helloWithName(name: String!): String!
  peopleNumber: Int!
  # Lista de elementos
  booksList: Result!
  peopleList: Result!
  # Elementos seleccionados
  book(id: ID!): Result!
  people(id: ID!): Result!
}

type Mutation {
  addBook(book: BookInput!): Result!
  updateBook(book: BookInput!): Result!
  deleteBook(id: ID!): Result!

  addPeople(people: PeopleInput): Result!
  updatePeople(people: PeopleInput): Result!
}

union Data = Book | People

# ? Books information
type Book {
  id: ID!
  title: String!
  isbn: String!
  pageCount: Int!
  publishedDate: String
  thumbnailUrl: String
  shortDescription: String
  longDescription: String
  status: String!
  authors: [String!]!
  # People who have bought this book
  byPeopleBuy: [People]
}

input BookInput {
  id: ID
  title: String!
  isbn: String!
  pageCount: Int!
  publishedDate: String
  thumbnailUrl: String
  shortDescription: String
  longDescription: String
  status: StatusEnum = UNPUBLISH
  "Authors who have written the book"
  authors: [String!]!
}

enum StatusEnum {
  PUBLISH
  UNPUBLISH
}

input PeopleInput {
  id: ID
  name: String!
  email: String!
  website: String
  github: String
  twitter: String
  books: [String!]!
}

# ? People information
type People {
  id: ID!
  name: String!
  email: String!
  website: String
  github: String
  twitter: String
  books: [String!]!
  # Books he's bought
  booksBuy: [Book]
}

# Definir resultado con m√°s detalle
type Result {
  status: Boolean!
  message: String!
  list: [Data!]
  item: Data
}
